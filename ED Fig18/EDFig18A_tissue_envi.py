## Results are based on ENVI imputation results, generated by "EDFig18A_ENVI_imputation.py"

import tissue.main, tissue.downstream

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from anndata import AnnData, read_h5ad
import os
import seaborn as sns


adata = read_h5ad("mers_imputed_1000.h5ad")
adata = adata[adata.obs['source'] == "FB080-O1c"].copy()
gene_lst = ['ABI3BP', 'PDZRN4', 'FLRT2', 'TAFA2', 'NR1D1', 'IL1RAP', 'CCBE1', 'THSD7B', 'CDH13', 'TRPC6', 'CHRM2', 
               'LUZP2', 'LRP1B', 'LRRTM4', 'HDAC9', 'FBXL7', 'DTNA', 'SYNDIG1', 'SDK1', 'LMO3', 'TRIQK', 'UNC13C', 'CNTNAP2', 'KCNIP4']
calib_gene_lst = adata.var_names
calib_gene_lst = np.intersect1d(calib_gene_lst, adata.obsm['imputation'].columns)
adata.uns["target_genes_used"] = gene_lst

tissue.main.build_spatial_graph(adata, method="fixed_radius", n_neighbors=15)
tissue.main.conformalize_spatial_uncertainty(adata, "imputation", 
                                            calib_genes=calib_gene_lst,
                                             grouping_method="kmeans_gene_cell", k=4, k2=2)    #, k=4, k2=2)

path = "TISSUE_result_gw20_impute1000"
os.makedirs(path, exist_ok = True)
alpha = 0.05

adata_copy = adata.copy()
tissue.main.conformalize_prediction_interval (adata_copy, "imputation", 
                                            #   calib_genes=adata.var_names,
                                            calib_genes=calib_gene_lst,
                                              alpha_level=alpha)
adata_copy.obsm['imputation_hi'][gene_lst].to_csv(f"{path}/imputation_hi_{alpha}.csv")
adata_copy.obsm['imputation_lo'][gene_lst].to_csv(f"{path}/imputation_lo_{alpha}.csv")


alpha = 0.05
impute_hi = pd.read_csv(f"TISSUE_result_gw20_impute1000/imputation_hi_{alpha}.csv", index_col = 0)
impute_lo = pd.read_csv(f"TISSUE_result_gw20_impute1000/imputation_lo_{alpha}.csv", index_col = 0)
impute_lo[impute_lo < 0] = 0
diff = impute_hi - impute_lo
diff_log = np.log1p(diff)
data_melted = diff_log.melt(var_name="Genes", value_name="CI Width")

plt.figure(figsize=(8, 5))
sns.boxplot(x="Genes", y="CI Width", data=data_melted, palette="muted", fliersize=0).set_ylim(0.3, 3)
plt.title("CI width")
plt.xticks(rotation=90)
plt.tight_layout()
plt.savefig("TISSUE_result_gw20_impute20/ci_width_violin.pdf", format = "pdf", dpi = 400)
plt.show()

